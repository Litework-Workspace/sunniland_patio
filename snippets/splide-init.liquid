<!--
This is the splide.js slider snippet to make it easy to apply to other sections.

Attributes
  - id: string = the identifier. Could be an id or a class
  - slideType: string ='slide' || 'loop' || 'fade'
  - perPage: integer = how many products per page
  - dots: boolean = pagination dots below the carousel
-->

<style>
  .{{ id }} .AspectRatio::before {
    display: none;
    content: none;
  }
  .{{ id }} .splide__arrow--prev {
    left: -15px;
  }
  .{{ id }} .splide__arrow--next {
    right: -15px;
  }
  .{{ id }} .splide__arrow--prev svg {
    transform: unset;
  }
  .{{ id }} .splide__arrows {
    <!-- position: relative; -->
  }
  @media screen and (min-width: 641px) {
    .{{ id }} .splide__arrow--prev {
      left: -40px;
    }
    .{{ id }} .splide__arrow--next {
      right: -40px;
    }
    .{{ id }}.splide-arrow-fix .splide__arrow--prev {
      left: 3px;
    }
    .{{ id }}.splide-arrow-fix .splide__arrow--next {
      right: 3px;
    }
  }
  @media screen and (min-width: 1140px) {
    .{{ id }} .splide__arrow--prev {
      left: -60px;
    }
    .{{ id }} .splide__arrow--next {
      right: -60px;
    }
    .{{ id }}.splide-arrow-fix .splide__arrow--prev {
      left: 25px;
    }
    .{{ id }}.splide-arrow-fix .splide__arrow--next {
      right: 25px;
    }
  }
</style>



  {% assign newId =  id | split: '-' | join: '_' %}
<script>
  document.addEventListener( 'DOMContentLoaded', function() {

    let splide_{{newId}} = new Splide( '.{{ id }}', {
      type   : '{{ slideType }}',
      perPage: 1,
      padding: {left: 0, right: '20%'},
      gap: '20px',
      <!-- arrowPath: 'M 20,50 L 60,90 L 60,85 L 25,50  L 60,15 L 60,10 Z', -->
      arrows: false,
      classes: {
        <!-- arrows: 'splide__arrows your-class-arrows', -->
        arrow : 'splide__arrow flickity-prev-next-button',
        prev  : 'splide__arrow--prev previous',
        next  : 'splide__arrow--next next',
      },
      mediaQuery: 'min',
      pagination: {{ dots }},
      breakpoints: {
        641: {
          arrows: true,
          perPage: 2,
          padding: 0,
          gap: '40px',
        },
        890: {
          perPage: 3
        },
        1090: {
          perPage: {{ perPage }},
        }
      }
    } );
    
    splide_{{newId}}.on('arrows:mounted',function(){
      console.log('all is mounted')
      let nextArrow = document.querySelectorAll('.splide .splide__arrow--next');
      let prevArrow = document.querySelectorAll('.splide .splide__arrow--prev');

      nextArrow.forEach(arrow => {
        arrow.innerHTML = '<svg viewBox="0 0 100 100"><path d="M 20,50 L 60,90 L 60,85 L 25,50  L 60,15 L 60,10 Z" class="arrow" transform="translate(100, 100) rotate(180) "></path></svg>';
      })
      prevArrow.forEach(arrow => {
        arrow.innerHTML = '<svg viewBox="0 0 100 100"><path d="M 20,50 L 60,90 L 60,85 L 25,50  L 60,15 L 60,10 Z" class="arrow"></path></svg>';
      })
    });

    splide_{{newId}}.mount();
  });
</script>
